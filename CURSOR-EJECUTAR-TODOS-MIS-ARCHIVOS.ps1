# ===============================================
# CURSOR EJECUTAR TODOS MIS ARCHIVOS
# Automatizaci√≥n completa desde Cursor
# ===============================================

Write-Host "ü§ñ CURSOR EJECUTANDO TODOS TUS ARCHIVOS" -ForegroundColor Cyan -BackgroundColor DarkBlue
Write-Host "=======================================" -ForegroundColor Yellow

# Configurar autom√°ticamente
$ErrorActionPreference = "Continue"
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser -Force

# Cambiar al directorio correcto
$targetDir = "C:\Users\PC\.android\c panel"
Set-Location $targetDir
Write-Host "üìÅ Directorio: $(Get-Location)" -ForegroundColor Green

Write-Host ""
Write-Host "üöÄ EJECUTANDO TODOS LOS ARCHIVOS AUTOM√ÅTICAMENTE..." -ForegroundColor Green
Write-Host "===================================================" -ForegroundColor Yellow

# 1. EJECUTAR CONFIGURACI√ìN PRINCIPAL
Write-Host ""
Write-Host "1Ô∏è‚É£ EJECUTANDO CONFIGURACI√ìN PRINCIPAL..." -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Yellow

try {
    # Crear directorios necesarios
    if (!(Test-Path "$env:USERPROFILE\.ssh")) {
        New-Item -ItemType Directory -Path "$env:USERPROFILE\.ssh" -Force | Out-Null
        Write-Host "‚úÖ Directorio SSH creado" -ForegroundColor Green
    }
    
    # Guardar clave SSH
    $sshKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWUOllsl8akAXn76BKADWCLZQ+vXiyK8SzjGlQKj68gVxuaaeQmoW7/EP+WSjf9zSEbPJvpUQLBdcqZSxo+jxOq0aO6zVjNAIxqGIli78LAez3ED4O5AHCaQ+xXTLIqJZSsie7VGoX2FkQw+jlzLd4QdRiqZoMUSLaQd7JI4/JLtVezqKajG6OBrcy232qLDzzVyuvUgcRjQibBhNgmguEjx78b8Zh2wgVD/gapLMIdR3VwABWr9Y5UUUd3N84XzBx4FJ99/nak8fBX+ikugQjWyrlpHxlgn+IL9HqKf2oTPq/FJ06tzlWPRDi0txC48+8Htchgz8Zke9+u7Z6PVOP"
    $sshKey | Out-File -FilePath "$env:USERPROFILE\.ssh\fimecompany_key.pub" -Encoding ASCII
    Write-Host "‚úÖ Clave SSH guardada" -ForegroundColor Green
    
} catch {
    Write-Host "‚ö†Ô∏è Error en configuraci√≥n principal: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 2. VERIFICAR ARCHIVOS WEB
Write-Host ""
Write-Host "2Ô∏è‚É£ VERIFICANDO ARCHIVOS WEB..." -ForegroundColor Cyan
Write-Host "==============================" -ForegroundColor Yellow

$archivosWeb = @{
    "index.html" = "Portal principal FIME COMPANY"
    "styles.css" = "Estilos unificados"
    "fimetech\index.html" = "FimeTech divisi√≥n"
    "fimekids\index.html" = "FimeKids divisi√≥n"
    "ferreteria\index.html" = "Ferreter√≠a divisi√≥n"
}

foreach ($archivo in $archivosWeb.Keys) {
    if (Test-Path $archivo) {
        $size = (Get-Item $archivo).Length
        Write-Host "‚úÖ $archivo - $($archivosWeb[$archivo]) ($size bytes)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $archivo - NO ENCONTRADO" -ForegroundColor Red
    }
}

# 3. VERIFICAR Y EJECUTAR SCRIPTS
Write-Host ""
Write-Host "3Ô∏è‚É£ EJECUTANDO TODOS LOS SCRIPTS..." -ForegroundColor Cyan
Write-Host "==================================" -ForegroundColor Yellow

$scripts = @(
    @{File="cursor-auto-ejecutar.ps1"; Desc="Verificaci√≥n autom√°tica"},
    @{File="verificar-automatizacion-completa.ps1"; Desc="Verificaci√≥n completa"},
    @{File="deployment-public-html.ps1"; Desc="Deployment public_html"},
    @{File="configurar-putty-completo-fime.ps1"; Desc="Configuraci√≥n PuTTY"}
)

foreach ($script in $scripts) {
    Write-Host ""
    Write-Host "üìú Ejecutando: $($script.File)" -ForegroundColor Yellow
    
    if (Test-Path $script.File) {
        try {
            # Cargar el script
            . ".\$($script.File)"
            Write-Host "‚úÖ $($script.File) - $($script.Desc) - CARGADO" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è $($script.File) - Error: $($_.Exception.Message)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå $($script.File) - NO ENCONTRADO" -ForegroundColor Red
    }
}

# 4. EJECUTAR VERIFICACI√ìN COMPLETA
Write-Host ""
Write-Host "4Ô∏è‚É£ EJECUTANDO VERIFICACI√ìN COMPLETA..." -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Yellow

try {
    # Verificar herramientas
    $herramientas = @("git", "ssh", "putty", "scp")
    
    foreach ($tool in $herramientas) {
        try {
            $toolPath = Get-Command $tool -ErrorAction Stop
            Write-Host "‚úÖ $tool - INSTALADO - $($toolPath.Source)" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå $tool - NO INSTALADO" -ForegroundColor Red
        }
    }
    
} catch {
    Write-Host "‚ö†Ô∏è Error verificando herramientas: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 5. VERIFICAR CONECTIVIDAD
Write-Host ""
Write-Host "5Ô∏è‚É£ VERIFICANDO CONECTIVIDAD..." -ForegroundColor Cyan
Write-Host "==============================" -ForegroundColor Yellow

$conexiones = @{
    22 = "SSH Puerto 22"
    2222 = "SSH Puerto 2222 (alternativo)"
    2083 = "cPanel HTTPS"
    80 = "Web HTTP"
    443 = "Web HTTPS"
}

foreach ($puerto in $conexiones.Keys) {
    try {
        $test = Test-NetConnection -ComputerName "fimecompany.com" -Port $puerto -WarningAction SilentlyContinue -InformationLevel Quiet
        if ($test.TcpTestSucceeded) {
            Write-Host "‚úÖ Puerto $puerto - $($conexiones[$puerto]) - CONECTADO" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Puerto $puerto - $($conexiones[$puerto]) - NO DISPONIBLE" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Puerto $puerto - $($conexiones[$puerto]) - ERROR" -ForegroundColor Red
    }
}

# 6. VERIFICAR SITIO WEB
Write-Host ""
Write-Host "6Ô∏è‚É£ VERIFICANDO SITIO WEB..." -ForegroundColor Cyan
Write-Host "===========================" -ForegroundColor Yellow

$sitios = @(
    "https://fimecompany.com",
    "https://fimecompany.com/fimetech/",
    "https://fimecompany.com/fimekids/",
    "https://fimecompany.com/ferreteria/"
)

foreach ($sitio in $sitios) {
    try {
        $response = Invoke-WebRequest -Uri $sitio -Method Head -TimeoutSec 5 -ErrorAction Stop
        Write-Host "‚úÖ $sitio - FUNCIONANDO (C√≥digo: $($response.StatusCode))" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå $sitio - NO DISPONIBLE" -ForegroundColor Red
    }
}

# 7. GENERAR RESUMEN AUTOM√ÅTICO
Write-Host ""
Write-Host "7Ô∏è‚É£ GENERANDO RESUMEN AUTOM√ÅTICO..." -ForegroundColor Cyan
Write-Host "==================================" -ForegroundColor Yellow

# Detectar estado actual
$estadoSSH = $false
$estadoArchivos = $false
$estadoSitio = $false

# Verificar SSH
try {
    $sshTest = Test-NetConnection -ComputerName "fimecompany.com" -Port 22 -WarningAction SilentlyContinue -InformationLevel Quiet
    $estadoSSH = $sshTest.TcpTestSucceeded
} catch { }

# Verificar archivos
$estadoArchivos = (Test-Path "index.html") -and (Test-Path "styles.css")

# Verificar sitio
try {
    $siteTest = Invoke-WebRequest -Uri "https://fimecompany.com" -Method Head -TimeoutSec 5 -ErrorAction Stop
    $estadoSitio = ($siteTest.StatusCode -eq 200)
} catch { }

# 8. MOSTRAR ESTADO FINAL
Write-Host ""
Write-Host "üìä ESTADO FINAL DE TODOS TUS ARCHIVOS" -ForegroundColor Cyan -BackgroundColor DarkBlue
Write-Host "=====================================" -ForegroundColor Yellow

Write-Host ""
Write-Host "‚úÖ ARCHIVOS EJECUTADOS EXITOSAMENTE:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Scripts PowerShell cargados" -ForegroundColor White
Write-Host "   ‚Ä¢ Configuraciones aplicadas" -ForegroundColor White
Write-Host "   ‚Ä¢ Verificaciones completadas" -ForegroundColor White
Write-Host "   ‚Ä¢ Conectividad probada" -ForegroundColor White

Write-Host ""
Write-Host "üìã ESTADO ACTUAL:" -ForegroundColor Yellow

if ($estadoSSH) {
    Write-Host "   ‚úÖ SSH - CONECTADO" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå SSH - NECESITA CONFIGURACI√ìN EN CPANEL" -ForegroundColor Red
}

if ($estadoArchivos) {
    Write-Host "   ‚úÖ ARCHIVOS WEB - LISTOS" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå ARCHIVOS WEB - VERIFICAR" -ForegroundColor Red
}

if ($estadoSitio) {
    Write-Host "   ‚úÖ SITIO WEB - FUNCIONANDO" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå SITIO WEB - NECESITA ARCHIVOS EN PUBLIC_HTML" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéØ PR√ìXIMOS PASOS AUTOM√ÅTICOS:" -ForegroundColor Yellow

if (!$estadoSSH) {
    Write-Host "   1. Configurar SSH en cPanel" -ForegroundColor White
    Write-Host "      ‚Ä¢ Ir a cPanel ‚Üí SSH Keys" -ForegroundColor Cyan
    Write-Host "      ‚Ä¢ Importar clave p√∫blica" -ForegroundColor Cyan
    Write-Host "      ‚Ä¢ Autorizar clave" -ForegroundColor Cyan
}

if (!$estadoSitio) {
    Write-Host "   2. Subir archivos a public_html" -ForegroundColor White
    Write-Host "      ‚Ä¢ Usar File Manager de cPanel" -ForegroundColor Cyan
    Write-Host "      ‚Ä¢ Subir index.html, styles.css" -ForegroundColor Cyan
    Write-Host "      ‚Ä¢ Subir carpetas fimetech, fimekids, ferreteria" -ForegroundColor Cyan
}

if ($estadoSSH -and $estadoSitio) {
    Write-Host "   üéâ ¬°TODO EST√Å FUNCIONANDO PERFECTAMENTE!" -ForegroundColor Green -BackgroundColor DarkGreen
    Write-Host "   ‚úÖ Automatizaci√≥n completa exitosa" -ForegroundColor Green
}

Write-Host ""
Write-Host "üîë TU CLAVE SSH PARA CPANEL:" -ForegroundColor Green
Write-Host "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWUOllsl8akAXn76BKADWCLZQ+vXiyK8SzjGlQKj68gVxuaaeQmoW7/EP+WSjf9zSEbPJvpUQLBdcqZSxo+jxOq0aO6zVjNAIxqGIli78LAez3ED4O5AHCaQ+xXTLIqJZSsie7VGoX2FkQw+jlzLd4QdRiqZoMUSLaQd7JI4/JLtVezqKajG6OBrcy232qLDzzVyuvUgcRjQibBhNgmguEjx78b8Zh2wgVD/gapLMIdR3VwABWr9Y5UUUd3N84XzBx4FJ99/nak8fBX+ikugQjWyrlpHxlgn+IL9HqKf2oTPq/FJ06tzlWPRDi0txC48+8Htchgz8Zke9+u7Z6PVOP" -ForegroundColor Cyan

Write-Host ""
Write-Host "ü§ñ CURSOR HA EJECUTADO TODOS TUS ARCHIVOS" -ForegroundColor Green -BackgroundColor DarkGreen
Write-Host "=========================================" -ForegroundColor Yellow
